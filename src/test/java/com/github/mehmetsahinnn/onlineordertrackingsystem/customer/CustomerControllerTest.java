package com.github.mehmetsahinnn.onlineordertrackingsystem.customer;import com.github.mehmetsahinnn.onlineordertrackingsystem.order.Order;import com.github.mehmetsahinnn.onlineordertrackingsystem.security.PCrypt;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import java.util.Arrays;import java.util.Collections;import java.util.List;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.mockito.ArgumentMatchers.anyString;import static org.mockito.Mockito.*;class CustomerControllerTest {    @Mock    private CustomerService customerService;    @Mock    private PCrypt crypt;    @InjectMocks    private CustomerController customerController;    @BeforeEach    public void init() {        try (AutoCloseable ac = MockitoAnnotations.openMocks(this)) {            Customer customer = new Customer();            when(customerService.getCurrentUser()).thenReturn(customer);        } catch (Exception e) {            throw new RuntimeException(e);        }    }    @Test    public void testLoginValidCredentials() {        Customer customer = new Customer(1L, "msa", "hin", "password", "john.doe@example.com", false);        when(customerService.findByEmail(anyString())).thenReturn(customer);        BCryptPasswordEncoder bCryptPasswordEncoder = mock(BCryptPasswordEncoder.class);        when(crypt.passwordEncoder()).thenReturn(bCryptPasswordEncoder);        when(bCryptPasswordEncoder.matches(anyString(), anyString())).thenReturn(true);        ResponseEntity<?> responseEntity = customerController.login(customer);        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());        assertEquals(customer, responseEntity.getBody());    }    @Test    public void testLoginInvalidCredentials() {        when(customerService.findByEmail(anyString())).thenReturn(null);        ResponseEntity<?> responseEntity = customerController.login(new Customer(1L,"msa","hin","password","john.doess@example.com",false));        assertEquals(HttpStatus.UNAUTHORIZED, responseEntity.getStatusCode());        assertEquals("Invalid email or password", responseEntity.getBody());    }    @Test    public void testRegisterUserSuccess() {        Customer customer = new Customer(1L,"msa","hin","$2a$12$0FhzESahSGLLbCEGFnrrRuEAES4Gk0nIq5Nzvh0.7jIjkv73c/Vcy","joshn.doe@example.com",false);        when(customerService.findByEmail(anyString())).thenReturn(null);        when(customerService.saveCustomer(customer)).thenReturn(customer);        ResponseEntity<?> responseEntity = customerController.registerUser(customer);        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());        assertEquals(customer, responseEntity.getBody());    }    @Test    public void testRegisterUser_UserAlreadyExists() {        Customer existingCustomer = new Customer(1L,"msa","hin","password","johns.doe@example.com",false);        when(customerService.findByEmail(anyString())).thenReturn(existingCustomer);        ResponseEntity<?> responseEntity = customerController.registerUser(existingCustomer);        assertEquals(HttpStatus.CONFLICT, responseEntity.getStatusCode());        assertEquals("User Already Exists ! ", responseEntity.getBody());    }    @Test    public void testListCustomers_Success() {        List<Customer> customers = Collections.singletonList(new Customer(1L,"msa","hin","password","josh.doe@example.com",false));        when(customerService.findAll()).thenReturn(customers);        ResponseEntity<?> responseEntity = customerController.listCustomers();        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());        assertEquals(customers, responseEntity.getBody());    }}